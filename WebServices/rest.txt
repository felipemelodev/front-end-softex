Servidor-Cliente: Cliente e servidor devem estar separados um do outro ee ter permissão de desenvolver de forma independente, conseguindo assim um melhor gerenciamento em diferentes plataformas.

Sem estado: Chamadas podem ser feitas independentemente umas das outras, cada chamada deve possuir todos os dados necessários para que seja compreendida e completada com eficácia.

Armazenável em cache: Como uma API sem estado pode aumentar sobrecarga de solicitação gerenciando grandes cargas de chamadas de entrada e saída, um design de API REST deve armazenar dados em cache. De acordo com este princípio de design de API, os dados em uma resposta devem ser indiretamente ou categorizados como armazenáveis ​​ou não armazenáveis ​​em cache.

Interface uniforme: Este princípio de design otimiza toda a arquitetura do sistema e aumenta a visibilidade das comunicações. Para obter uma interface uniforme, vários controles de arquitetura são necessários para orientar o desempenho dos elementos dentro da arquitetura da API REST. Os princípios REST são definidos por quatro controles de interface, incluindo identificação de recursos, gerenciamento de recursos por meio de representações, comunicações autodescritivas e hipermídia como mecanismo do estado do aplicativo.

Sistema em camadas: A arquitetura da API REST inclui várias camadas que operam juntas para construir uma hierarquia que ajuda a gerar um aplicativo mais escalável e flexível. Devido ao seu sistema em camadas, um aplicativo tem melhor segurança, pois os componentes em cada camada não podem interagir fora da camada subsequente. Além disso, ele equilibra cargas e oferece caches compartilhados para estimular escalabilidade.

Código sob demanda: Uma definição da API REST permite estender a funcionalidade do cliente baixando e implementando a codificação na forma de applets ou scripts. Isso simplifica os clientes, diminuindo o número de recursos essenciais a serem pré-implementados.

